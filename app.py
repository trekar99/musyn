import gradio as gr
import torch
import numpy as np
from model.bart import BartCaptionModel
from utils.audio_utils import get_audio, preprocess_audio
import config
from model.txt2img import ImageGenerator

# Image Generation
generator = ImageGenerator()

# Prompt Generator
device = "cuda:0" if torch.cuda.is_available() else "cpu"

model = BartCaptionModel(max_length = 128)
pretrained_object = torch.load('model/models/lpmusiccaps.pth', map_location='cpu')
state_dict = pretrained_object['state_dict']
model.load_state_dict(state_dict)
if torch.cuda.is_available():
    torch.cuda.set_device(device)
    generator.pipeline.to(device)
    generator.vae.to(device)
model = model.cuda(device)
model.eval()

def captioning(audio, last_inf):
    audio_tensor = get_audio(audio) if isinstance(audio, str) else preprocess_audio(audio, 16000)
    if (audio_tensor.shape[1] == 160000):
      if device is not None:
          audio_tensor = audio_tensor.to(device)
      with torch.no_grad():
          output = model.generate(
              samples=audio_tensor,
              num_beams=5,
          )
      inference = ""
      number_of_chunks = range(audio_tensor.shape[0])
      for chunk, text in zip(number_of_chunks, output):
          inference += f"{text} \n \n"
    else:
      inference = last_inf

    return inference, audio

def hello(profile: gr.OAuthProfile | None) -> str:
    if profile is None:
        return "I don't know you."
    print(profile)
    return f"Hello {profile.name}"

with gr.Blocks(title = config.title, css = config.css) as demo:
    gr.Markdown(config.web_title, elem_id="intro")
    gr.Markdown(config.description, elem_id="intro")
    gr.LoginButton(size="md", icon=None)

    #prueba = gr.Markdown(elem_id="elemento")
    #demo.load(list_organizations, None, prueba)
    with gr.Tab("Live Audio"):
      with gr.Row():
          with gr.Column():
              # Audio pierde mucha informaci√≥n
              input_audio = gr.Audio(label="Input", sources="microphone")
              input_caption = gr.Textbox(label="Input Prompt")
            
              examples = gr.Examples([
                                      ["Brasilian Beach, Rio de Janeiro"], 
                                      ["Gnawa Village, Morocco"]
                                    ], input_caption)

          with gr.Column():
              output_caption = gr.Textbox(label="Caption generated by LP-MusicCaps Transfer Model")
              output_audio = gr.Audio()
              
          with gr.Column():
              output_img = gr.Image()

      input_audio.stream(captioning,
                        [input_audio, output_caption],
                        [output_caption, output_audio],
                        time_limit=0, stream_every=10, concurrency_limit=30
                        )
      timer = gr.Timer(0)
      timer.tick(generator.image_generator, [input_caption, output_caption], output_img)

    with gr.Tab("File Audio"):
      with gr.Row():
        with gr.Column():
          input_audio2 = gr.Audio(label="Input", type="filepath")
          input_caption2 = gr.Textbox(label="Input Prompt")
        with gr.Column():
          output_caption2 = gr.Textbox(label="Caption generated by LP-MusicCaps Transfer Model")
          output_img2 = gr.Image(label="Output")
          output_audio2 = gr.Audio()
      with gr.Row():
        btn = gr.Button("Run")
        btn.click(fn=captioning, inputs=[input_audio2, output_caption2], outputs=[output_caption2, output_audio2])

      #timer2 = gr.Timer(0)
      #timer2.tick(generator.image_generator, [input_caption2, output_caption2], output_img2)

if __name__ == "__main__":
    demo.launch(share=True, debug=True, favicon_path="./favicon.png", inline=False, inbrowser=True,)# auth=["admin","admin"])
